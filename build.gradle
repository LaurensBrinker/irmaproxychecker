apply plugin: 'com.android.application'
apply plugin: 'maven'

version="0.8"
group="org.irmacard"

ext.targetJavaVersion = JavaVersion.current().isJava7() ? JavaVersion.VERSION_1_7 : JavaVersion.VERSION_1_8


buildscript {
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

repositories {
    mavenLocal()
    maven {
        url "https://credentials.github.io/repos/maven2/"
    }

    // Use this to get minimal android library
    maven {
        url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/"
    }
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    lintOptions {
        // BCProv references javax.naming
        // CredentialsAPI references java.awt and java.swing
        disable 'InvalidPackage'
    }
}

configurations {
    if (targetJavaVersion.isJava7()) {
        checkerFrameworkJavac {
            description = 'a customization of the Open JDK javac compiler with additional support for type annotations'
        }
    }
    checkerFrameworkAnnotatedJDK {
       description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
    }
    checkerFramework {
       description = 'The Checker Framework: custom pluggable types for Java'
    }
    sparta
}

dependencies {
    ext.checkerFrameworkVersion = '1.9.11'
    ext.jdkVersion = JavaVersion.current().isJava7() ? 'jdk7' : 'jdk8'
    checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
    checkerFrameworkJavac "org.checkerframework:compiler:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
    compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"

    sparta fileTree(dir: "$System.env.SPARTA_CODE", include: ['*.jar'])
    if (typecheck) {
        compile fileTree(dir: "$System.env.SPARTA_CODE", include: ['*.jar'])
    }
    compile 'com.loopj.android:android-async-http:1.4.3'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.google.code.gson:gson:2.2.2'

    // zxing QR code libraries
    compile 'com.embarkmobile:zxing-android-minimal:2.0.0@aar'
    compile 'com.embarkmobile:zxing-android-integration:2.0.0@aar'
    compile 'com.google.zxing:core:3.0.1'

    compile "org.irmacard.android:irma_android_library:0.9.1"
    compile 'net.sf.scuba:scuba_sc_android:0.0.7-irma'
    compile 'net.sf.scuba:scuba_smartcards:0.0.7-irma'
    
    ext.checkerFrameworkVersion = '1.9.13'
    ext.jdkVersion = JavaVersion.current().isJava7() ? 'jdk7' : 'jdk8'
    checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
}


def typecheck = project.properties['typecheck'] ?: false
allprojects {
if (typecheck) {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).all { JavaCompile compile ->
        compile.options.compilerArgs = [
                '-processor', 'sparta.checkers.FlowChecker',
                '-processorpath', "${configurations.sparta.asPath}:${configurations.checkerFramework.asPath}",
                '-AflowPolicy=/Flow-Policy/policy.flow'
                // uncomment to turn Checker Framework errors into warnings
                //'-Awarns',
                //"-AprintErrorStack"
        ]
            compile.options.compilerArgs += ['-source', '7', '-target', '7']
            options.bootClasspath = "${configurations.checkerFrameworkJavac.asPath}:" + System.getProperty("sun.boot.class.path") + ":" + options.bootClasspath


            options.fork = true
            options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
        }
    }
    }
}     

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
